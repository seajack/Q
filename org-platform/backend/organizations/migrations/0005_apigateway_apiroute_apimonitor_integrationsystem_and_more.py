# Generated by Django 5.2.1 on 2025-09-25 02:07

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0004_positiontemplate_systemconfig_workflowrule_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='APIGateway',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='网关名称')),
                ('base_url', models.URLField(verbose_name='网关地址')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('rate_limit_enabled', models.BooleanField(default=True, verbose_name='启用限流')),
                ('rate_limit_per_minute', models.IntegerField(default=1000, verbose_name='每分钟请求限制')),
                ('rate_limit_per_hour', models.IntegerField(default=10000, verbose_name='每小时请求限制')),
                ('monitoring_enabled', models.BooleanField(default=True, verbose_name='启用监控')),
                ('log_level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error')], default='info', max_length=20, verbose_name='日志级别')),
                ('cors_enabled', models.BooleanField(default=True, verbose_name='启用CORS')),
                ('cors_origins', models.JSONField(blank=True, default=list, verbose_name='CORS源')),
                ('api_key_required', models.BooleanField(default=False, verbose_name='需要API Key')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': 'API网关',
                'verbose_name_plural': 'API网关',
            },
        ),
        migrations.CreateModel(
            name='APIRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='路由名称')),
                ('path', models.CharField(max_length=200, verbose_name='路径')),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE'), ('PATCH', 'PATCH')], max_length=10, verbose_name='请求方法')),
                ('target_url', models.URLField(verbose_name='目标地址')),
                ('rate_limit', models.IntegerField(default=100, verbose_name='限流(请求/分钟)')),
                ('burst_limit', models.IntegerField(default=200, verbose_name='突发限制')),
                ('cache_enabled', models.BooleanField(default=False, verbose_name='启用缓存')),
                ('cache_ttl', models.IntegerField(default=300, verbose_name='缓存时间(秒)')),
                ('auth_required', models.BooleanField(default=True, verbose_name='需要认证')),
                ('roles_required', models.JSONField(blank=True, default=list, verbose_name='所需角色')),
                ('request_transform', models.JSONField(blank=True, default=dict, verbose_name='请求转换')),
                ('response_transform', models.JSONField(blank=True, default=dict, verbose_name='响应转换')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('gateway', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routes', to='organizations.apigateway', verbose_name='API网关')),
            ],
            options={
                'verbose_name': 'API路由',
                'verbose_name_plural': 'API路由',
                'unique_together': {('gateway', 'path', 'method')},
            },
        ),
        migrations.CreateModel(
            name='APIMonitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('request_count', models.IntegerField(default=0, verbose_name='请求次数')),
                ('success_count', models.IntegerField(default=0, verbose_name='成功次数')),
                ('error_count', models.IntegerField(default=0, verbose_name='错误次数')),
                ('avg_response_time', models.FloatField(default=0, verbose_name='平均响应时间(ms)')),
                ('max_response_time', models.FloatField(default=0, verbose_name='最大响应时间(ms)')),
                ('min_response_time', models.FloatField(default=0, verbose_name='最小响应时间(ms)')),
                ('error_rate', models.FloatField(default=0, verbose_name='错误率(%)')),
                ('status_code_distribution', models.JSONField(default=dict, verbose_name='状态码分布')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitors', to='organizations.apiroute', verbose_name='API路由')),
            ],
            options={
                'verbose_name': 'API监控',
                'verbose_name_plural': 'API监控',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='IntegrationSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='系统名称')),
                ('system_type', models.CharField(choices=[('performance', '绩效考核系统'), ('oa', 'OA系统'), ('finance', '财务系统'), ('crm', 'CRM系统'), ('erp', 'ERP系统'), ('hr', '人力资源系统'), ('custom', '自定义系统')], max_length=20, verbose_name='系统类型')),
                ('base_url', models.URLField(verbose_name='系统地址')),
                ('api_version', models.CharField(default='v1', max_length=20, verbose_name='API版本')),
                ('status', models.CharField(choices=[('active', '启用'), ('inactive', '禁用'), ('error', '错误'), ('testing', '测试中')], default='inactive', max_length=20, verbose_name='状态')),
                ('auth_type', models.CharField(choices=[('none', '无认证'), ('basic', '基础认证'), ('token', 'Token认证'), ('oauth2', 'OAuth2'), ('api_key', 'API Key')], default='none', max_length=20, verbose_name='认证类型')),
                ('auth_config', models.JSONField(blank=True, default=dict, verbose_name='认证配置')),
                ('timeout', models.IntegerField(default=30, verbose_name='超时时间(秒)')),
                ('retry_count', models.IntegerField(default=3, verbose_name='重试次数')),
                ('rate_limit', models.IntegerField(default=100, verbose_name='限流(请求/分钟)')),
                ('sync_enabled', models.BooleanField(default=False, verbose_name='启用同步')),
                ('sync_interval', models.IntegerField(default=60, verbose_name='同步间隔(分钟)')),
                ('last_sync_time', models.DateTimeField(blank=True, null=True, verbose_name='最后同步时间')),
                ('monitoring_enabled', models.BooleanField(default=True, verbose_name='启用监控')),
                ('health_check_url', models.URLField(blank=True, verbose_name='健康检查地址')),
                ('alert_email', models.EmailField(blank=True, max_length=254, verbose_name='告警邮箱')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': '集成系统',
                'verbose_name_plural': '集成系统',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataSyncRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='规则名称')),
                ('sync_type', models.CharField(choices=[('realtime', '实时同步'), ('batch', '批量同步'), ('scheduled', '定时同步')], max_length=20, verbose_name='同步类型')),
                ('status', models.CharField(choices=[('active', '启用'), ('inactive', '禁用'), ('error', '错误'), ('running', '运行中')], default='inactive', max_length=20, verbose_name='状态')),
                ('source_table', models.CharField(max_length=100, verbose_name='源表名')),
                ('target_table', models.CharField(max_length=100, verbose_name='目标表名')),
                ('field_mapping', models.JSONField(default=dict, verbose_name='字段映射')),
                ('filter_conditions', models.JSONField(blank=True, default=dict, verbose_name='过滤条件')),
                ('batch_size', models.IntegerField(default=1000, verbose_name='批次大小')),
                ('sync_interval', models.IntegerField(default=60, verbose_name='同步间隔(分钟)')),
                ('max_retry_count', models.IntegerField(default=3, verbose_name='最大重试次数')),
                ('data_cleaning_enabled', models.BooleanField(default=True, verbose_name='启用数据清洗')),
                ('cleaning_rules', models.JSONField(blank=True, default=list, verbose_name='清洗规则')),
                ('validation_enabled', models.BooleanField(default=True, verbose_name='启用数据校验')),
                ('validation_rules', models.JSONField(blank=True, default=list, verbose_name='校验规则')),
                ('monitoring_enabled', models.BooleanField(default=True, verbose_name='启用监控')),
                ('alert_on_error', models.BooleanField(default=True, verbose_name='错误告警')),
                ('alert_on_delay', models.BooleanField(default=True, verbose_name='延迟告警')),
                ('delay_threshold', models.IntegerField(default=30, verbose_name='延迟阈值(分钟)')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
                ('source_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_sync_rules', to='organizations.integrationsystem', verbose_name='源系统')),
                ('target_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_sync_rules', to='organizations.integrationsystem', verbose_name='目标系统')),
            ],
            options={
                'verbose_name': '数据同步规则',
                'verbose_name_plural': '数据同步规则',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('success', '成功'), ('error', '错误'), ('warning', '警告'), ('running', '运行中')], max_length=20, verbose_name='状态')),
                ('start_time', models.DateTimeField(verbose_name='开始时间')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('total_records', models.IntegerField(default=0, verbose_name='总记录数')),
                ('success_records', models.IntegerField(default=0, verbose_name='成功记录数')),
                ('error_records', models.IntegerField(default=0, verbose_name='错误记录数')),
                ('skipped_records', models.IntegerField(default=0, verbose_name='跳过记录数')),
                ('error_message', models.TextField(blank=True, verbose_name='错误信息')),
                ('error_details', models.JSONField(blank=True, default=dict, verbose_name='错误详情')),
                ('duration_seconds', models.FloatField(blank=True, null=True, verbose_name='耗时(秒)')),
                ('records_per_second', models.FloatField(blank=True, null=True, verbose_name='每秒记录数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('sync_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='organizations.datasyncrule', verbose_name='同步规则')),
            ],
            options={
                'verbose_name': '同步日志',
                'verbose_name_plural': '同步日志',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IntegrationConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_key', models.CharField(max_length=100, verbose_name='配置键')),
                ('config_value', models.TextField(verbose_name='配置值')),
                ('config_type', models.CharField(choices=[('string', '字符串'), ('integer', '整数'), ('boolean', '布尔值'), ('json', 'JSON对象'), ('url', 'URL'), ('email', '邮箱')], default='string', max_length=20, verbose_name='配置类型')),
                ('is_encrypted', models.BooleanField(default=False, verbose_name='是否加密')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configs', to='organizations.integrationsystem', verbose_name='集成系统')),
            ],
            options={
                'verbose_name': '集成配置',
                'verbose_name_plural': '集成配置',
                'unique_together': {('system', 'config_key')},
            },
        ),
    ]
